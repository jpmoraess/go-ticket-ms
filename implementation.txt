package main

import (
    "context"
    "encoding/json"
    "log"
    "net/http"
    "time"

    "github.com/jackc/pgx/v4/pgxpool"
)

type OrderHandler struct {
    dbpool *pgxpool.Pool
}

func NewOrderHandler(dbpool *pgxpool.Pool) *OrderHandler {
    return &OrderHandler{dbpool: dbpool}
}

func (h *OrderHandler) CreateOrder(w http.ResponseWriter, r *http.Request) {
    input := usecase.CreateOrderInputDTO{}
    if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
        http.Error(w, "Error decoding request body", http.StatusBadRequest)
        return
    }

    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()

    go func(ctx context.Context) {
        defer cancel()
        conn, err := h.dbpool.Acquire(ctx)
        if err != nil {
            log.Printf("Unable to acquire a database connection: %v", err)
            return
        }
        defer conn.Release()

        err = h.createOrderUseCase.Execute(input)
        if err != nil {
            log.Printf("Error creating order: %v", err)
        }
    }(ctx)

    select {
    case <-ctx.Done():
        if ctx.Err() == context.Canceled {
            response := map[string]string{"msg": "order created successfully"}
            w.Header().Set("Content-Type", "application/json")
            if err := json.NewEncoder(w).Encode(response); err != nil {
                http.Error(w, "Error returning response", http.StatusInternalServerError)
            }
        } else {
            http.Error(w, "Request timed out", http.StatusRequestTimeout)
        }
    }
}

func main() {
    connStr := "postgres://username:password@localhost:5432/dbname"
    dbpool, err := pgxpool.Connect(context.Background(), connStr)
    if err != nil {
        log.Fatalf("Unable to connect to database: %v\n", err)
    }
    defer dbpool.Close()

    handler := NewOrderHandler(dbpool)
    http.HandleFunc("/create-order", handler.CreateOrder)

    log.Fatal(http.ListenAndServe(":8080", nil))
}
